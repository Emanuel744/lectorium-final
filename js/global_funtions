// Global functions that need to be available for HTML onclick handlers

// Navigation function
window.showSection = function(sectionName) {
  console.log('Changing section to:', sectionName);
  
  // Update navigation tabs
  const navItems = document.querySelectorAll('.nav-item');
  navItems.forEach(item => {
    item.classList.remove('active');
    if (item.getAttribute('data-section') === sectionName) {
      item.classList.add('active');
    }
  });

  // Update content sections
  const contentSections = document.querySelectorAll('.content-section');
  contentSections.forEach(section => {
    section.classList.add('hidden');
    if (section.id === sectionName) {
      section.classList.remove('hidden');
      section.classList.add('fade-in');
    }
  });

  // Load section-specific content
  if (sectionName === 'analytics') {
    setTimeout(() => {
      if (window.initializeAnalytics) {
        window.initializeAnalytics();
      }
    }, 100);
  }
  
  return sectionName;
};

// Notification system
window.showNotification = function(message, type = 'info') {
  const icons = {
    success: 'fa-check-circle',
    error: 'fa-exclamation-circle',
    info: 'fa-info-circle',
    warning: 'fa-exclamation-triangle'
  };
  
  const colors = {
    success: 'text-green-600',
    error: 'text-red-600',
    info: 'text-blue-600',
    warning: 'text-yellow-600'
  };
  
  const toastContainer = document.getElementById('toastContainer');
  if (!toastContainer) return;
  
  const toast = document.createElement('div');
  toast.className = 'toast';
  toast.innerHTML = `
    <div class="flex align-center space-x-3">
      <i class="fas ${icons[type]} ${colors[type]} text-xl"></i>
      <span class="font-medium">${message}</span>
    </div>
  `;
  
  toastContainer.appendChild(toast);
  
  setTimeout(() => toast.classList.add('show'), 100);
  
  setTimeout(() => {
    toast.classList.remove('show');
    setTimeout(() => toast.remove(), 300);
  }, 3000);
};

// Book details modal
window.showBookDetails = function(bookId) {
  console.log('Show book details:', bookId);
  
  // Sample book data for demonstration
  const sampleBooks = [
    {
      id: '1',
      titulo: "Cien Años de Soledad",
      autor: "Gabriel García Márquez",
      categoria: "moderno",
      disponible: true,
      isbn: "978-0-06-088328-7",
      año: 1967,
      editorial: "Harper & Row",
      paginas: 417,
      descripcion: "La historia épica de la familia Buendía a lo largo de siete generaciones en el pueblo ficticio de Macondo.",
      vecesPrestado: 15
    },
    {
      id: '2',
      titulo: "Don Quijote de la Mancha",
      autor: "Miguel de Cervantes",
      categoria: "clasico",
      disponible: true,
      isbn: "978-84-376-0494-7",
      año: 1605,
      editorial: "Francisco de Robles",
      paginas: 1023,
      descripcion: "Las aventuras del hidalgo Don Quijote y su fiel escudero Sancho Panza.",
      vecesPrestado: 23
    }
  ];
  
  const book = sampleBooks.find(b => b.id === bookId) || sampleBooks[0];
  
  const categoryColors = {
    clasico: 'from-amber-500 to-orange-600',
    moderno: 'from-purple-500 to-pink-600',
    ficcion: 'from-blue-500 to-indigo-600',
    ciencia: 'from-green-500 to-teal-600',
    historia: 'from-red-500 to-pink-600',
    infantil: 'from-yellow-400 to-orange-500',
    juvenil: 'from-pink-500 to-purple-600'
  };
  
  const gradient = categoryColors[book.categoria] || 'from-gray-500 to-gray-600';
  
  const bookModalContent = document.getElementById('bookModalContent');
  if (!bookModalContent) return;
  
  bookModalContent.innerHTML = `
    <div class="flex justify-between align-center mb-6">
      <h2 class="text-2xl font-bold tracking-tight">${book.titulo}</h2>
      <button onclick="window.closeBookModal()" class="text-gray-400 hover:text-gray-600">
        <i class="fas fa-times text-xl"></i>
      </button>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div>
        <div class="bg-gradient-to-br ${gradient} h-64 rounded-lg mb-4 flex align-center justify-center">
          <i class="fas fa-book text-white text-6xl opacity-80"></i>
        </div>
        <div class="space-y-2 text-sm">
          <p><span class="font-medium">Autor:</span> ${book.autor}</p>
          <p><span class="font-medium">ISBN:</span> ${book.isbn}</p>
          <p><span class="font-medium">Año:</span> ${book.año}</p>
          <p><span class="font-medium">Editorial:</span> ${book.editorial}</p>
          <p><span class="font-medium">Páginas:</span> ${book.paginas}</p>
          <p><span class="font-medium">Categoría:</span> ${book.categoria}</p>
          <p><span class="font-medium">Veces prestado:</span> ${book.vecesPrestado}</p>
        </div>
      </div>
      
      <div>
        <h3 class="font-semibold text-lg mb-3">Descripción</h3>
        <p class="text-gray-600 dark:text-gray-400 mb-6 leading-relaxed">
          ${book.descripcion}
        </p>
        
        <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 mb-6">
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">Estado del libro:</p>
          <p class="text-lg font-semibold ${book.disponible ? 'text-green-600' : 'text-red-600'}">
            ${book.disponible ? '✓ Disponible para préstamo' : '✗ Actualmente prestado'}
          </p>
        </div>
        
        <button 
          onclick="window.requestBook('${book.id}'); window.closeBookModal();" 
          class="w-full bg-purple-600 text-white py-3 rounded-lg font-semibold micro-interaction ${!book.disponible ? 'opacity-50 cursor-not-allowed' : ''}"
          ${!book.disponible ? 'disabled' : ''}
        >
          ${book.disponible ? 'Solicitar Préstamo' : 'No Disponible'}
        </button>
      </div>
    </div>
  `;
  
  const bookModal = document.getElementById('bookModal');
  if (bookModal) {
    bookModal.classList.remove('hidden');
  }
};

window.closeBookModal = function() {
  const modal = document.getElementById('bookModal');
  if (modal) {
    modal.classList.add('hidden');
  }
};

// Book request function
window.requestBook = function(bookId) {
  const currentUser = window.getCurrentUser ? window.getCurrentUser() : null;
  
  if (!currentUser) {
    window.showNotification('Debes iniciar sesión para solicitar libros', 'warning');
    const authModal = document.getElementById('authModal');
    if (authModal) {
      authModal.classList.remove('hidden');
    }
    return;
  }
  
  // Simulate book request
  window.showNotification('¡Préstamo exitoso! El libro ha sido reservado por 14 días', 'success');
  
  // Update UI to show the loan
  setTimeout(() => {
    window.updateLoansList();
  }, 500);
};

// Loan management functions
window.returnBook = function(loanId, bookId) {
  if (confirm('¿Estás seguro de que deseas devolver este libro?')) {
    window.showNotification('Libro devuelto exitosamente', 'success');
    window.updateLoansList();
  }
};

window.renewLoan = function(loanId) {
  window.showNotification('Préstamo renovado por 7 días adicionales', 'success');
  window.updateLoansList();
};

// Filter management
window.clearFilters = function() {
  const searchInput = document.getElementById('searchInput');
  const categoryFilter = document.getElementById('categoryFilter');
  
  if (searchInput) searchInput.value = '';
  if (categoryFilter) categoryFilter.value = '';
  
  window.showNotification('Filtros limpiados', 'info');
  
  // Refresh book grid
  window.loadSampleBooks();
};

// User management
window.getCurrentUser = function() {
  return window.currentUser || null;
};

window.getBooks = function() {
  return window.sampleBooksData || [];
};

window.getUserLoans = function() {
  return window.userLoansData || [];
};

// Sample data initialization
window.initializeSampleData = function() {
  // Sample books
  window.sampleBooksData = [
    {
      id: '1',
      titulo: "Cien Años de Soledad",
      autor: "Gabriel García Márquez",
      categoria: "moderno",
      disponible: true,
      isbn: "978-0-06-088328-7"
    },
    {
      id: '2',
      titulo: "Don Quijote de la Mancha",
      autor: "Miguel de Cervantes",
      categoria: "clasico",
      disponible: true,
      isbn: "978-84-376-0494-7"
    },
    {
      id: '3',
      titulo: "1984",
      autor: "George Orwell",
      categoria: "ficcion",
      disponible: false,
      isbn: "978-0-452-28423-4"
    },
    {
      id: '4',
      titulo: "El Principito",
      autor: "Antoine de Saint-Exupéry",
      categoria: "infantil",
      disponible: true,
      isbn: "978-0-15-601219-5"
    }
  ];

  // Sample user loans
  window.userLoansData = [
    {
      id: 'loan1',
      libroId: '3',
      titulo: "1984",
      autor: "George Orwell",
      fechaPrestamo: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
      fechaVencimiento: new Date(Date.now() + 9 * 24 * 60 * 60 * 1000),
      renovaciones: 0
    }
  ];
  
  // Update stats
  window.updateDashboardStats();
  window.loadSampleBooks();
  window.updateLoansList();
  window.updateRecentBooks();
};

// Load sample books into catalog
window.loadSampleBooks = function() {
  const booksGrid = document.getElementById('booksGrid');
  if (!booksGrid) return;
  
  const books = window.getBooks();
  
  booksGrid.innerHTML = books.map(book => `
    <div class="glass rounded-xl overflow-hidden book-card cursor-pointer">
      <div class="relative">
        <div class="bg-gradient-to-br from-purple-500 to-pink-600 h-48 flex align-center justify-center">
          <i class="fas fa-book text-white text-5xl opacity-80"></i>
        </div>
        <div class="absolute top-2 right-2 bg-${book.disponible ? 'green' : 'red'}-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
          ${book.disponible ? 'Disponible' : 'Prestado'}
        </div>
      </div>
      <div class="p-4">
        <h3 class="font-semibold text-lg mb-1">${book.titulo}</h3>
        <p class="text-sm opacity-70 mb-2">${book.autor}</p>
        <p class="text-xs opacity-60 mb-3">ISBN: ${book.isbn}</p>
        <div class="flex space-x-2">
          <button onclick="event.stopPropagation(); window.requestBook('${book.id}')" 
            class="flex-1 bg-purple-600 text-white py-2 rounded-lg text-sm font-semibold micro-interaction ${!book.disponible ? 'opacity-50 cursor-not-allowed' : ''}"
            ${!book.disponible ? 'disabled' : ''}
          >
            ${book.disponible ? 'Solicitar' : 'No disponible'}
          </button>
          <button onclick="event.stopPropagation(); window.showBookDetails('${book.id}')" class="p-2 glass rounded-lg micro-interaction">
            <i class="fas fa-info-circle"></i>
          </button>
        </div>
      </div>
    </div>
  `).join('');
};

// Update dashboard statistics
window.updateDashboardStats = function() {
  const books = window.getBooks();
  const loans = window.getUserLoans();
  
  const totalBooks = books.length;
  const availableBooks = books.filter(book => book.disponible).length;
  const activeLoans = loans.length;
  const dueSoon = loans.filter(loan => {
    const daysLeft = Math.ceil((loan.fechaVencimiento - new Date()) / (1000 * 60 * 60 * 24));
    return daysLeft >= 0 && daysLeft <= 7;
  }).length;
  
  // Update all stat displays
  const updates = {
    'totalBooksCount': totalBooks,
    'availableBooksCount': availableBooks,
    'myLoansCount': activeLoans,
    'dueSoonCount': dueSoon,
    'heroTotalBooks': totalBooks,
    'heroAvailableBooks': availableBooks,
    'heroActiveLoans': activeLoans
  };
  
  Object.entries(updates).forEach(([id, value]) => {
    const element = document.getElementById(id);
    if (element) {
      element.textContent = value;
    }
  });
  
  // Update notification badge
  const notificationCount = document.getElementById('notificationCount');
  if (notificationCount) {
    if (dueSoon > 0) {
      notificationCount.textContent = dueSoon;
      notificationCount.classList.remove('hidden');
    } else {
      notificationCount.classList.add('hidden');
    }
  }
};

// Update loans list
window.updateLoansList = function() {
  const loansContainer = document.getElementById('loansContainer');
  if (!loansContainer) return;
  
  const loans = window.getUserLoans();
  
  if (loans.length === 0) {
    loansContainer.innerHTML = `
      <div class="text-center py-12">
        <i class="fas fa-book-open text-6xl opacity-20 mb-4"></i>
        <p class="text-xl font-semibold opacity-70">No tienes préstamos activos</p>
        <p class="text-sm opacity-50 mt-2">¡Explora nuestro catálogo y encuentra tu próxima lectura!</p>
      </div>
    `;
    return;
  }
  
  loansContainer.innerHTML = loans.map(loan => {
    const daysLeft = Math.ceil((loan.fechaVencimiento - new Date()) / (1000 * 60 * 60 * 24));
    const isOverdue = daysLeft < 0;
    const isNearDue = daysLeft >= 0 && daysLeft <= 3;
    
    return `
      <div class="glass rounded-lg p-4 ${isOverdue ? 'border-2 border-red-500' : isNearDue ? 'border-2 border-yellow-500' : ''}">
        <div class="flex justify-between align-start">
          <div>
            <h4 class="font-semibold text-lg">${loan.titulo}</h4>
            <p class="text-sm opacity-70">${loan.autor}</p>
            <div class="mt-2 space-y-1 text-sm">
              <p><i class="fas fa-calendar-check mr-2"></i>Prestado: ${loan.fechaPrestamo.toLocaleDateString()}</p>
              <p><i class="fas fa-calendar-times mr-2"></i>Vence: ${loan.fechaVencimiento.toLocaleDateString()}</p>
              ${loan.renovaciones > 0 ? `<p><i class="fas fa-sync mr-2"></i>Renovaciones: ${loan.renovaciones}/2</p>` : ''}
            </div>
            <div class="mt-3">
              ${isOverdue ? 
                `<span class="text-red-600 font-semibold"><i class="fas fa-exclamation-triangle mr-1"></i>Vencido hace ${Math.abs(daysLeft)} días</span>` : 
                isNearDue ?
                `<span class="text-yellow-600 font-semibold"><i class="fas fa-clock mr-1"></i>Vence en ${daysLeft} días</span>` :
                `<span class="text-green-600 font-semibold"><i class="fas fa-check-circle mr-1"></i>${daysLeft} días restantes</span>`
              }
            </div>
          </div>
          
          <div class="flex flex-column space-y-2">
            <button onclick="window.returnBook('${loan.id}', '${loan.libroId}')" 
              class="bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-semibold micro-interaction">
              <i class="fas fa-undo mr-2"></i>Devolver
            </button>
            ${!isOverdue && loan.renovaciones < 2 ? `
              <button onclick="window.renewLoan('${loan.id}')" 
                class="bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-semibold micro-interaction">
                <i class="fas fa-sync mr-2"></i>Renovar
              </button>
            ` : ''}
          </div>
        </div>
      </div>
    `;
  }).join('');
};

// Update recent books display
window.updateRecentBooks = function() {
  const recentBooks = document.getElementById('recentBooks');
  if (!recentBooks) return;
  
  const books = window.getBooks().slice(0, 5);
  
  recentBooks.innerHTML = books.map(book => `
    <div class="flex align-center justify-between p-3 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg cursor-pointer" onclick="window.showBookDetails('${book.id}')">
      <div>
        <p class="font-semibold">${book.titulo}</p>
        <p class="text-sm opacity-70">${book.autor}</p>
      </div>
      <span class="text-xs px-2 py-1 rounded-full ${book.disponible ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}">
        ${book.disponible ? 'Disponible' : 'Prestado'}
      </span>
    </div>
  `).join('');
};

// Initialize analytics charts
window.initializeAnalytics = function() {
  const monthlyCtx = document.getElementById('monthlyChart');
  const categoryCtx = document.getElementById('categoryChart');
  
  if (monthlyCtx && window.Chart) {
    if (window.Chart.getChart(monthlyCtx)) {
      window.Chart.getChart(monthlyCtx).destroy();
    }
    
    new window.Chart(monthlyCtx, {
      type: 'line',
      data: {
        labels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun'],
        datasets: [{
          label: 'Préstamos',
          data: [12, 19, 15, 25, 22, 30],
          borderColor: 'rgb(37, 99, 235)',
          backgroundColor: 'rgba(37, 99, 235, 0.1)',
          tension: 0.4,
          fill: true
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false }
        }
      }
    });
  }
  
  if (categoryCtx && window.Chart) {
    if (window.Chart.getChart(categoryCtx)) {
      window.Chart.getChart(categoryCtx).destroy();
    }
    
    new window.Chart(categoryCtx, {
      type: 'doughnut',
      data: {
        labels: ['Clásicos', 'Modernos', 'Ficción', 'Infantil'],
        datasets: [{
          data: [1, 1, 1, 1],
          backgroundColor: [
            'rgba(245, 158, 11, 0.8)',
            'rgba(168, 85, 247, 0.8)',
            'rgba(37, 99, 235, 0.8)',
            'rgba(34, 197, 94, 0.8)'
          ]
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { position: 'bottom' }
        }
      }
    });
  }
  
  // Update top books
  const topBooks = document.getElementById('topBooks');
  if (topBooks) {
    const books = [
      { titulo: "Cien Años de Soledad", autor: "Gabriel García Márquez", prestamos: 23 },
      { titulo: "Don Quijote", autor: "Miguel de Cervantes", prestamos: 19 },
      { titulo: "1984", autor: "George Orwell", prestamos: 15 },
      { titulo: "El Principito", autor: "Antoine de Saint-Exupéry", prestamos: 12 }
    ];
    
    topBooks.innerHTML = books.map((book, index) => `
      <div class="flex align-center justify-between p-3 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg cursor-pointer">
        <div class="flex align-center space-x-3">
          <span class="text-2xl font-bold text-purple-600">#${index + 1}</span>
          <div>
            <p class="font-semibold">${book.titulo}</p>
            <p class="text-sm opacity-70">${book.autor}</p>
          </div>
        </div>
        <span class="text-sm font-medium">${book.prestamos} préstamos</span>
      </div>
    `).join('');
  }
};

// Initialize everything when DOM loads
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, initializing sample data...');
  window.initializeSampleData();
});
